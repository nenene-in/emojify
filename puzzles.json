// script.js

// Development environment variable
const isDev = true; // Set to false in production

// Arrays of emojis for correct and incorrect guesses
const correctEmojis = ['🎉', '✅', '😄', '🌟', '🏆', '👍', '👏', '🥳'];
const incorrectEmojis = ['❌', '😕', '😬', '👎', '🤔', '😢', '🚫', '😞'];

// Game state variables
let score = 100;
let guessedLetters = [];
let incorrectGuesses = 0;
let maxIncorrectGuesses = 10;
let currentCategory = 'trivia';
let puzzleData;

// Function to initialize the game
async function initGame() {
  // Display current date in the nav bar
  displayCurrentDate();

  // Fetch the puzzle data
  const puzzles = await fetchPuzzles();

  // Get today's puzzle for the current category
  puzzleData = getTodaysPuzzle(puzzles);

  if (!puzzleData) {
    alert('No puzzle available for today in this category.');
    return;
  }

  const emojiElement = document.getElementById('emoji-puzzle');
  const blanksContainer = document.getElementById('blanks-container');

  // Reset game state variables
  score = 100;
  guessedLetters = [];
  incorrectGuesses = 0;

  // Update category hashtag
  const categoryHashtag = document.getElementById('category-hashtag');
  categoryHashtag.textContent = `#${currentCategory}`;
  categoryHashtag.textContent = categoryHashtag.textContent.toLowerCase();

  // Display the emoji puzzle
  emojiElement.innerText = puzzleData.puzzle;

  // Initialize score display
  updateScoreDisplay();

  // Clear feedback and wrong letters
  document.getElementById('feedback').innerText = '';
  document.getElementById('wrong-letters').innerHTML = '';
  document.querySelector('.incorrect-guesses').classList.add('hidden');

  // Hide info section
  document.getElementById('info-section').classList.add('hidden');

  // Enable the input field
  const inputField = document.getElementById('hidden-input');
  inputField.disabled = false;

  // Create blanks for each word in the answer
  blanksContainer.innerHTML = '';

  // Split the answer into words
  const words = puzzleData.answer.split(' ');

  // Global index to assign unique IDs to letter blanks
  let globalIndex = 0;

  words.forEach((word) => {
    const wordContainer = document.createElement('div');
    wordContainer.classList.add('word-container');

    for (let i = 0; i < word.length; i++) {
      const blank = document.createElement('div');
      blank.classList.add('blank-letter');
      blank.setAttribute('id', `letter-${globalIndex}`);
      wordContainer.appendChild(blank);
      globalIndex++;
    }

    blanksContainer.appendChild(wordContainer);
  });

  // Remove event listeners before adding new ones
  document.removeEventListener('keydown', handleKeyPress);

  // Event listener for key presses
  document.addEventListener('keydown', handleKeyPress);

  // Event listener for mobile users to focus the hidden input
  const puzzleSection = document.getElementById('puzzle-section');
  puzzleSection.addEventListener('click', () => {
    document.getElementById('hidden-input').focus();
  });

  // Event listener for input in hidden field
  document.getElementById('hidden-input').addEventListener('input', handleMobileInput);
}

// Function to fetch puzzles
async function fetchPuzzles() {
  if (isDev) {
    // Return puzzles from local variable
    return localPuzzles.puzzles;
  } else {
    try {
      const response = await fetch('https://raw.githubusercontent.com/yourusername/yourrepo/main/puzzles.json');
      const data = await response.json();
      return data.puzzles;
    } catch (error) {
      console.error('Error fetching puzzles:', error);
      alert('Failed to load puzzles.');
      return [];
    }
  }
}

// Function to get today's puzzle for the current category
function getTodaysPuzzle(puzzles) {
  const today = new Date().toISOString().split('T')[0];
  return puzzles.find(puzzle => puzzle.date === today && puzzle.category === currentCategory);
}

// Function to display current date
function displayCurrentDate() {
  const dateElement = document.getElementById('current-date');
  const today = new Date();
  const day = String(today.getDate()).padStart(2, '0');
  const month = String(today.getMonth() + 1).padStart(2, '0');
  const year = String(today.getFullYear()).slice(-2);
  const formattedDate = `${day}.${month}.${year}`;
  dateElement.innerText = formattedDate;
}

// Function to handle key presses
function handleKeyPress(event) {
  const key = event.key.toUpperCase();
  processGuess(key);
}

// Function to handle input from the hidden input field (mobile)
function handleMobileInput(event) {
  const inputField = event.target;
  const key = inputField.value.toUpperCase();
  inputField.value = '';
  processGuess(key);
}

// Function to process the guessed letter
function processGuess(key) {
  const feedbackElement = document.getElementById('feedback');

  // Check if key is a letter
  if (key.length === 1 && key.match(/[A-Z]/i)) {
    if (guessedLetters.includes(key)) {
      feedbackElement.innerText = 'You already guessed that letter.';
      return;
    }

    guessedLetters.push(key);

    if (puzzleData.answer.toUpperCase().includes(key)) {
      // Correct guess
      fillInLetters(key);
      displayEmojiFeedback(true);

      // Check if the puzzle is solved
      if (isPuzzleSolved()) {
        feedbackElement.innerText = 'Congratulations! You solved the puzzle!';
        endGame();
      }
    } else {
      // Incorrect guess
      incorrectGuesses++;
      updateScore(-10); // Deduct 10 points for incorrect guess
      displayEmojiFeedback(false);

      // Update the display of wrong letters
      displayWrongLetter(key);

      // Remove "hidden" class from incorrect guesses section
      const incorrectGuessesSection = document.querySelector('.incorrect-guesses');
      incorrectGuessesSection.classList.remove('hidden');

      checkGameOver();
    }
  }
}

// Function to display emoji feedback
function displayEmojiFeedback(isCorrect) {
  const feedbackElement = document.getElementById('feedback');
  const emojiList = isCorrect ? correctEmojis : incorrectEmojis;
  const randomEmoji = emojiList[Math.floor(Math.random() * emojiList.length)];
  feedbackElement.innerText = randomEmoji;
}

// Function to fill in the correct letters
function fillInLetters(letter) {
  let globalIndex = 0;

  const words = puzzleData.answer.split(' ');

  words.forEach((word) => {
    for (let i = 0; i < word.length; i++) {
      if (word[i].toUpperCase() === letter) {
        const letterElement = document.getElementById(`letter-${globalIndex}`);
        if (letterElement) {
          letterElement.innerText = word[i];
          letterElement.classList.add('filled-letter');
        }
      }
      globalIndex++;
    }
  });
}

// Function to check if the puzzle is solved
function isPuzzleSolved() {
  let globalIndex = 0;
  const words = puzzleData.answer.split(' ');

  for (let word of words) {
    for (let i = 0; i < word.length; i++) {
      const letterElement = document.getElementById(`letter-${globalIndex}`);
      if (letterElement && letterElement.innerText === '') {
        return false;
      }
      globalIndex++;
    }
  }
  return true;
}

// Function to update the score and the circular progress indicator
function updateScore(amount) {
  score += amount;
  if (score < 0) score = 0;
  updateScoreDisplay();
}

function updateScoreDisplay() {
  const scoreText = document.getElementById('score-text');
  scoreText.textContent = score;

  const progressBar = document.querySelector('.progress-bar');
  const radius = 45;
  const circumference = 2 * Math.PI * radius;
  const percent = score / 100;
  const offset = circumference - percent * circumference;
  progressBar.style.strokeDasharray = circumference;
  progressBar.style.strokeDashoffset = offset;

  // Calculate color based on score
  const color = getColor(score);
  progressBar.style.stroke = color;
}

function getColor(score) {
  // Green: #28a745 RGB(40, 167, 69)
  // Red: #dc3545 RGB(220, 53, 69)
  const green = { r: 40, g: 167, b: 69 };
  const red = { r: 220, g: 53, b: 69 };

  const ratio = score / 100;

  const r = Math.round(red.r + (green.r - red.r) * ratio);
  const g = Math.round(red.g + (green.g - red.g) * ratio);
  const b = Math.round(red.b + (green.b - red.b) * ratio);

  return `rgb(${r}, ${g}, ${b})`;
}

// Function to check if the game is over
function checkGameOver() {
  if (incorrectGuesses >= maxIncorrectGuesses) {
    const feedbackElement = document.getElementById('feedback');
    feedbackElement.innerText = 'Game over!';
    revealAnswer();
    endGame();
  }
}

// Function to reveal the answer
function revealAnswer() {
  let globalIndex = 0;
  const words = puzzleData.answer.split(' ');

  for (let word of words) {
    for (let i = 0; i < word.length; i++) {
      const letterElement = document.getElementById(`letter-${globalIndex}`);
      if (letterElement && letterElement.innerText === '') {
        letterElement.innerText = word[i];
        letterElement.classList.add('filled-letter');
      }
      globalIndex++;
    }
  }
}

// Function to display educational info and social sharing
function endGame() {
  document.removeEventListener('keydown', handleKeyPress);
  const inputField = document.getElementById('hidden-input');
  inputField.disabled = true;

  displayEducationalInfo();
}

// Function to display educational info
function displayEducationalInfo() {
  const infoSection = document.getElementById('info-section');
  const infoText = document.getElementById('info-text');
  const infoLink = document.getElementById('info-link');

  infoText.innerText = puzzleData.info;
  infoLink.href = puzzleData.link;

  infoSection.classList.remove('hidden');

  // Scroll to top to ensure info-section is visible
  window.scrollTo(0, 0);

  // Set up social media share links
  setupSocialShare();
}

// Function to set up social media sharing
function setupSocialShare() {
  const shareText = `I just scored ${score} points on Emojify! ${puzzleData.puzzle} #Emojify #${currentCategory}`;
  const shareUrl = window.location.href;

  // Twitter Share
  const twitterLink = `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(shareUrl)}`;
  document.getElementById('share-twitter').href = twitterLink;

  // Facebook Share
  const facebookLink = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}&quote=${encodeURIComponent(shareText)}`;
  document.getElementById('share-facebook').href = facebookLink;

  // WhatsApp Share
  const whatsappLink = `https://api.whatsapp.com/send?text=${encodeURIComponent(shareText + ' ' + shareUrl)}`;
  document.getElementById('share-whatsapp').href = whatsappLink;
}

// Function to display wrong letters
function displayWrongLetter(letter) {
  const wrongLettersContainer = document.getElementById('wrong-letters');
  const letterElement = document.createElement('span');
  letterElement.classList.add('wrong-letter');
  letterElement.innerText = letter;
  wrongLettersContainer.appendChild(letterElement);
}

// Event listener for category selection
function setupCategorySelection() {
  const menuLinks = document.querySelectorAll('.menu a');
  menuLinks.forEach(link => {
    link.addEventListener('click', (event) => {
      event.preventDefault();
      currentCategory = event.target.getAttribute('data-category');
      // Close the menu
      document.getElementById('menu-toggle').checked = false;
      // Re-initialize the game with the new category
      initGame();
    });
  });
}

// Event listener for logo click to reset to trivia
function setupLogoClick() {
  const logoLink = document.getElementById('logo-link');
  logoLink.addEventListener('click', (event) => {
    event.preventDefault();
    currentCategory = 'trivia';
    initGame();
  });
}

// Initialize the game when the page loads
window.onload = () => {
  setupCategorySelection();
  setupLogoClick();
  initGame();
};
